---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Cardano Development

## General Guidelines
1. Always refer to official documentation for Mesh SDK, Lucid Evolution, and Blockfrost before implementing any Cardano functionality.
2. Verify API methods exist before using them - don't assume functionality.
3. Follow the specific initialization patterns for each library.
4. Check compatibility between libraries before combining them in the same component.

## Mesh SDK Rules
1. Always wrap React applications with `<MeshProvider>` in the component tree for wallet connectivity.
2. Use `useWallet()` hook to access wallet functionality (connect, disconnect, getAssets, etc.).
3. For wallet connection, use the `CardanoWallet` component or `connect()` method from the hook.
4. When building transactions, use either `Transaction` class for Mesh or the native wallet methods.
5. Remember Mesh has separate packages: `@meshsdk/core` and `@meshsdk/react`.

## Lucid Evolution Rules
1. Initialize Lucid with a provider: `const lucid = await Lucid(provider, network)`.
2. Use `lucid.newTx()` to start building transactions.
3. Follow the builder pattern for transactions: `.payToAddress().attachMetadata().complete()`.
4. Sign transactions with `.sign.withWallet().complete()` and submit with `.submit()`.
5. Use the proper Data formats for datums and redeemers (follow CML conventions).

## Blockfrost Rules
1. Initialize Blockfrost with your project ID: `new BlockFrostAPI({ projectId: apiKey })`.
2. For IPFS, use `BlockFrostIPFS` class with separate project ID.
3. Handle API responses properly with try/catch since Blockfrost operations can fail.
4. Respect rate limits by minimizing unnecessary API calls.
5. Always check response status before processing data.

## Wallet Connection Rules
1. Check wallet availability with `BrowserWallet.getInstalledWallets()`.
2. Always handle the case where no wallet is installed.
3. Store connected state and handle reconnection scenarios.
4. Protect sensitive operations with wallet signature verification.
5. Implement proper error handling for wallet connection failures.

## Smart Contract Rules
1. Don't write contract code directly - use pre-compiled contracts via SDKs.
2. Use metadata for simple on-chain attestations when full contracts aren't needed.
3. Follow Cardano's transaction structure: inputs, outputs, metadata.
4. Remember policy IDs are required for token operations.
5. Transaction costs include both fees and minimum ADA requirements.

## IPFS Rules
1. Always pin important files to ensure persistence.
2. Implement caching for frequently accessed IPFS content.
3. Handle IPFS timeouts and failures gracefully.
4. Use appropriate content addressing (CIDs) when referencing IPFS content.
5. Store structured data as JSON with clear schemas.

### ALWAYS USE PNPM FOR INSTALLATION
